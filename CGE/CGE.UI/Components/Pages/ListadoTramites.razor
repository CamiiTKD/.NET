@page "/listadotramites"
@rendermode InteractiveServer
@inject NavigationManager Navegador;
@using System.Linq;
@inject IServicioAutorizacion ServicioAutorizacion
@inject CasoDeUsoTramiteBaja CasoDeUsoTramiteBaja
@inject CasoDeUsoTramiteAlta CasoDeUsoTramiteAlta
@inject CasoDeUsoTramiteConsultaTodos CasoDeUsoTramiteConsultaTodos
@inject CasoDeUsoUsuarioConsultaPorId CasoDeUsoUsuarioConsultaPorId
@inject CasoDeUsoTramiteConsultaPorEtiqueta CasoDeUsoTramiteConsultaPorEtiqueta
@inject ServicioSesion servicioSesion

<PageTitle>Tramites</PageTitle>
<tbody>
    @if (_lista.Count() > 0)
    {
        <h1>Tramites</h1>
        @if (displayingAll)
        {
            <button class="btn btn-secondary">
                Ordenar por etiqueta
            </button>
        }
        else @*Mostrando filtrados*@
        {
            <button class="btn btn-secondary" @onclick="() => CargarTodos()">
                Ver Todos
            </button>
        }

        <table class="table">
            <thead>
                <tr>
                    <th>ID Usuario</th>
                    <th>ID Expediente</th>
                    <th>Tipo</th>
                    <th>Contenido</th>
                    <th>Creación</th>
                    <th>Última Modificación</th>
                    <th>Modificado por</th>
                    <th>Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in _lista)
                {
                    <tr>
                        <td>@t.Id</td>
                        <td>@t.ExpedienteId</td>
                        <td>@t.Tipo</td>
                        <td>@t.Contenido</td>
                        <td>@t.Creacion</td>
                        <td>@t.UltimaModificacion</td>
                        <td>@t.IdUsuario</td>
                        <td>
                            @if (shouldDisplayModificar)
                            {
                                <button class="btn btn-secondary" @onclick="() => RedirigirModificarTramite(t)">
                                    Modificar
                                </button>
                            }
                            @if (shouldDisplayEliminar)
                            {
                                <button class="btn btn-danger" @onclick="() => ConfirmarEliminacionTramite(t)">
                                    Eliminar
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <h3>No se han cargado tramites por el momento</h3>
    }
    @if (shouldDisplayAlta)
    {
        <h2>Registre un trámite</h2>
        <input placeholder="Contenido" @bind="_contenido" />
        <input placeholder="Expediente asociado" type="number" @bind=_expedienteAsociado>
        <select @bind="_tipo">
            @foreach (var tipo in Enum.GetValues(typeof(EtiquetaTramite)))
            {
                <option value="@tipo">@tipo.ToString().Replace("_", " ")</option>
            }
        </select>
        <button @onclick="ConfirmarAlta">Aceptar</button>
    }
    else
    {
        <h1>No posee permisos para dar un alta de expediente, comuníquese con el administrador para solicitar el permiso.
        </h1>
    }
</tbody>

@code {
    private bool shouldDisplayModificar = false;
    private bool shouldDisplayEliminar = false;
    private bool shouldDisplayAlta = false;
    private bool displayingAll = true;
    List<Tramite> _lista = new List<Tramite>();

    private string? _contenido;
    private int _expedienteAsociado;
    private EtiquetaTramite _tipo;

    protected override void OnInitialized()
    {
        _lista = CasoDeUsoTramiteConsultaTodos.EjecutarConsultarTodos();
        if ((servicioSesion.UsuarioLogged != null) && (servicioSesion.UsuarioLogged.permisos != null))
        {
            if (ServicioAutorizacion.PoseeElPermiso(servicioSesion.UsuarioLogged.permisos, Permiso.TramiteModificacion))
            {
                shouldDisplayModificar = true;
            }
            if (ServicioAutorizacion.PoseeElPermiso(servicioSesion.UsuarioLogged.permisos, Permiso.TramiteBaja))
            {
                shouldDisplayEliminar = true;
            }
            if (ServicioAutorizacion.PoseeElPermiso(servicioSesion.UsuarioLogged.permisos, Permiso.TramiteAlta))
            {
                shouldDisplayAlta = true;
            }
            StateHasChanged();
        }
    }


    private void ConfirmarAlta()
    {
        Tramite tramite = new Tramite(_expedienteAsociado, _tipo, _contenido, servicioSesion.UsuarioLogged.id);
        CasoDeUsoTramiteAlta.EjecutarTramiteAlta(tramite, servicioSesion.UsuarioLogged);
        _lista = CasoDeUsoTramiteConsultaTodos.EjecutarConsultarTodos();
    }

    private void Filtrar(EtiquetaTramite etq)
    {
        displayingAll = false;
        _lista = CasoDeUsoTramiteConsultaPorEtiqueta.EjecutarConsultaPorEtiqueta(etq);
    }
    private void CargarTodos()
    {
        displayingAll = true;
        _lista = CasoDeUsoTramiteConsultaTodos.EjecutarConsultarTodos();
    }

    private void RedirigirModificarTramite(Tramite t)
    {
        Navegador.NavigateTo($"{t.Id}/modificartramite");
    }

    DialogoConfirmacion dialogo = null!;
    private void ConfirmarEliminacionTramite(Tramite t)
    {
        dialogo.OnConfirmado = EventCallback.Factory.Create(this, () => Eliminar(t));
        dialogo.Mensaje = $"¿Desea eliminar el trámite {t.Id}?";
        dialogo.Mostrar();
    }
    private void Eliminar(Tramite t)
    {
        CasoDeUsoTramiteBaja.EjecutarTramiteBaja(t.Id, servicioSesion.UsuarioLogged);
        _lista = CasoDeUsoTramiteConsultaTodos.EjecutarConsultarTodos();
    }
}