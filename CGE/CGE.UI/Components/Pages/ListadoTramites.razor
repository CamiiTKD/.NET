@page "/listadotramites"
@rendermode InteractiveServer
@inject NavigationManager Navegador;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Linq;
@inject ProtectedSessionStorage sessionStorage
@inject IServicioAutorizacion ServicioAutorizacion
@inject IJSRuntime JSRuntime
@inject CasoDeUsoTramiteBaja CasoDeUsoExpedienteBaja
@inject CasoDeUsoTramiteAlta CasoDeUsoExpedienteAlta
@inject CasoDeUsoTramiteConsultaTodos CasoDeUsoTramiteConsultaTodos
@inject CasoDeUsoUsuarioConsultaPorId CasoDeUsoUsuarioConsultaPorId
@inject CasoDeUsoTramiteConsultaPorEtiqueta CasoDeUsoTramiteConsultaPorEtiqueta

<DialogoOpcionesTramite @ref="dialogoOpciones" OnConfirmado="HandleConfirmacion" />

<PageTitle>Tramites</PageTitle>
<tbody>
    @if (_lista.Count() > 0)
    {
        <h1>Tramites</h1>
        @if (displayingAll)
        {
            <button class="btn btn-secondary" @onclick="() => ConfirmarOrdenamiento()">
                Ordenar por etiqueta
            </button>
        }
        else
        {
            <button class="btn btn-secondary" @onclick="() => CargarTodos()">
                Ver Todos
            </button>
        }

        <table class="table">
            <thead>
                <tr>
                    <th>ID Usuario</th>
                    <th>ID Expediente</th>
                    <th>Tipo</th>
                    <th>Contenido</th>
                    <th>Creación</th>
                    <th>Última Modificación</th>
                    <th>Modificado por</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in _lista)
                {
                    <tr>
                        <td>@t.Id</td>
                        <td>@t.ExpedienteId</td>
                        <td>@t.Tipo</td>
                        <td>@t.Contenido</td>
                        <td>@t.Creacion</td>
                        <td>@t.UltimaModificacion</td>
                        <td>@t.IdUsuario</td>
                        <td>
                            @if (shouldDisplayModificar)
                            {
                                <button class="btn btn-secondary" @onclick="() => RedirigirModificarTramite(t)">
                                    Modificar
                                </button>
                            }
                            @if (shouldDisplayEliminar)
                            {
                                <button class="btn btn-danger" @onclick="() => ConfirmarEliminacionTramite(t)">
                                    Eliminar
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <h3>No se han cargado tramites por el momento</h3>
    }
</tbody>

@code {
    private bool shouldDisplayModificar = false;
    private bool shouldDisplayEliminar = false;
    private bool displayingAll = true;
    List<Tramite> _lista = new List<Tramite>();
    int userId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _lista = CasoDeUsoTramiteConsultaTodos.EjecutarConsultarTodos();
            var result = await sessionStorage.GetAsync<int>("userId");
            userId = result.Success ? result.Value : 0;
            Usuario? user = CasoDeUsoUsuarioConsultaPorId.EjecutarConsulta(userId);
            if ((user != null) && (user.permisos != null))
            {
                if (ServicioAutorizacion.PoseeElPermiso(user.permisos, Permiso.TramiteModificacion))
                {
                    shouldDisplayModificar = true;
                }
                if (ServicioAutorizacion.PoseeElPermiso(user.permisos, Permiso.TramiteBaja))
                {
                    shouldDisplayEliminar = true;
                }
                StateHasChanged();
            }
        }
    }

    DialogoOpcionesTramite dialogoOpciones = null;
    EtiquetaTramite etiquetaSeleccionada;
    private async Task HandleConfirmacion(EtiquetaTramite opcion)
    {
        etiquetaSeleccionada = opcion;
    }
    private void ConfirmarOrdenamiento()
    {
        dialogoOpciones.OnConfirmado = EventCallback.Factory.Create<EtiquetaTramite>(this, () => Filtrar(etiquetaSeleccionada));
        dialogoOpciones.Mensaje = $"Filtrar por...";
        dialogoOpciones.Mostrar();
    }

    private void Filtrar(EtiquetaTramite etq)
    {
        displayingAll = false;
        _lista = CasoDeUsoTramiteConsultaPorEtiqueta.EjecutarConsultaPorEtiqueta(etq);
    }
    private void CargarTodos()
    {
        displayingAll = true;
        _lista = CasoDeUsoTramiteConsultaTodos.EjecutarConsultarTodos();
    }

    private void RedirigirModificarTramite(Tramite t)
    {
        Navegador.NavigateTo($"{t.Id}/modificartramite");
    }
    DialogoConfirmacion dialogo = null!;
    private void ConfirmarEliminacionTramite(Tramite t)
    {
        dialogo.OnConfirmado = EventCallback.Factory.Create(this, () => Eliminar(t));
        dialogo.Mensaje = $"¿Desea eliminar el trámite {t.Id}?";
        dialogo.Mostrar();
    }
    private void Eliminar(Tramite t)
    {
        Usuario? user = CasoDeUsoUsuarioConsultaPorId.EjecutarConsulta(userId);
        CasoDeUsoExpedienteBaja.EjecutarTramiteBaja(t.Id, user);
        _lista = CasoDeUsoTramiteConsultaTodos.EjecutarConsultarTodos();
        Navegador.NavigateTo($"listadotramites");
    }
}