@page "/listadoexpedientes"
@rendermode InteractiveServer
@inject NavigationManager Navegador;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Linq;
@inject ProtectedSessionStorage sessionStorage
@inject IServicioAutorizacion ServicioAutorizacion
@inject IJSRuntime JSRuntime

@inject CasoDeUsoExpedienteBaja CasoDeUsoExpedienteBaja
@inject CasoDeUsoExpedienteAlta CasoDeUsoExpedienteAlta
@inject CasoDeUsoExpedienteConsultaTodos CasoDeUsoListarExpedientes
@inject CasoDeUsoExpedienteConsultaPorId CasoDeUsoListarId
@inject CasoDeUsoUsuarioConsultaPorId CasoDeUsoUsuarioConsultaPorId

<DialogoConfirmacion @ref="dialogo" />

<PageTitle>Expedientes</PageTitle>

<tbody>
    @if (_lista.Count() > 0)
    {
        <h1>Expedientes</h1>
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Carátula</th>
                    <th>Estado</th>
                    <th>Creación</th>
                    <th>Última Modificación</th>
                    <th>Modificado por</th>
                    <th>Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var e in _lista)
                {
                    <tr>
                        <td>@e.Id</td>
                        <td>@e.Caratula</td>
                        <td>@e.Estado</td>
                        <td>@e.Creacion</td>
                        <td>@e.UltimaModificacion</td>
                        <td>@e.IdUsuario</td>
                        <td>
                            @if (shouldDisplayModificar)
                            {
                                <button class="btn btn-secondary" @onclick="() => RedirigirModificarExpediente(e)">
                                    Modificar
                                </button>
                            }
                            @if (shouldDisplayEliminar)
                            {
                                <button class="btn btn-danger" @onclick="() => ConfirmarEliminacionExpediente(e)">
                                    Eliminar
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <h3>No se han cargado expedientes por el momento</h3>
    }
    @if (shouldDisplayAlta)
    {
        <PageTitle>Crear expediente</PageTitle>
        <h1>Registre un expediente con su carátula</h1>
        <input placeholder="Carátula" @bind="_caratula" />
        <button @onclick="DarDeAltaExpediente">Aceptar</button>
    }
    else
    {
        <h1>No posee permisos para dar un alta de expediente, comuníquese con el administrador para solicitar el permiso.
        </h1>
    }
</tbody>

@code {
    private bool shouldDisplayModificar = false;
    private bool shouldDisplayEliminar = false;
    private bool shouldDisplayAlta = false;
    List<Expediente> _lista = new List<Expediente>();
    string? _caratula;
    int userId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _lista = CasoDeUsoListarExpedientes.EjecutarConsultarTodos();
            var result = await sessionStorage.GetAsync<int>("userId");
            userId = result.Success ? result.Value : 0;
            Usuario? user = CasoDeUsoUsuarioConsultaPorId.EjecutarConsulta(userId);
            if ((user != null) && (user.permisos != null))
            {
                if (ServicioAutorizacion.PoseeElPermiso(user.permisos, Permiso.ExpedienteModificacion))
                {
                    shouldDisplayModificar = true;
                }
                if (ServicioAutorizacion.PoseeElPermiso(user.permisos, Permiso.ExpedienteBaja))
                {
                    shouldDisplayEliminar = true;
                }
                if (ServicioAutorizacion.PoseeElPermiso(user.permisos, Permiso.ExpedienteAlta))
                {
                    shouldDisplayAlta = true;
                }
                StateHasChanged();
            }
        }
    }

    void DarDeAltaExpediente()
    {
        Expediente expediente = new Expediente(_caratula, userId);
        Usuario? user = CasoDeUsoUsuarioConsultaPorId.EjecutarConsulta(userId);
        CasoDeUsoExpedienteAlta.EjecutarExpedienteAlta(expediente, user);
    }
    private void RedirigirModificarExpediente(Expediente e)
    {
        Navegador.NavigateTo($"{e.Id}/modificarexpediente");
    }
    DialogoConfirmacion dialogo = null!;
    private void ConfirmarEliminacionExpediente(Expediente e)
    {
        dialogo.OnConfirmado = EventCallback.Factory.Create(this, () => EliminarExpediente(e));
        dialogo.Mensaje = $"¿Desea eliminar el expediente del usuario {e.Id} junto a todos sus tramites?";
        dialogo.Mostrar();
    }
    private void EliminarExpediente(Expediente e)
    {
        Usuario? user = CasoDeUsoUsuarioConsultaPorId.EjecutarConsulta(userId);
        CasoDeUsoExpedienteBaja.EjecutarExpedienteBaja(e.Id, user);
        _lista = CasoDeUsoListarExpedientes.EjecutarConsultarTodos();
        Navegador.NavigateTo($"listadoexpedientes");
    }
}